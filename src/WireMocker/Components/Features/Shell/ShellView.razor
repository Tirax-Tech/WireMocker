@typeparam T where T: ViewModel

@inherits ReactiveInjectableComponentBase<ShellViewModel>
@inject IServiceProvider ServiceProvider

@switch (ViewModel!.ViewMode){
    case ViewMode.Single:
        <View ViewModel="ViewModel!.Content"/>
        break;

    case ViewMode.Dual view:
        @if (view.DetailPanel is null){
            <DualPanel>
                <LeftPanel>
                    <View ViewModel="ViewModel!.Content"/>
                </LeftPanel>
            </DualPanel>
        }
        else{
            <DualPanel>
                <LeftPanel>
                    <View ViewModel="ViewModel!.Content"/>
                </LeftPanel>
                <RightPanel>
                    <View ViewModel="view.DetailPanel"/>
                </RightPanel>
            </DualPanel>
        }
        break;
}

@code {

    [Parameter]
    public AppMode? AppMode { get; set; }

    [Parameter]
    public bool IsDual { get; set; }

    protected override void OnParametersSet() {
        var vm = ActivatorUtilities.GetServiceOrCreateInstance<T>(ServiceProvider);
        ViewModel!.InitView(vm, IsDual, Optional(AppMode));
        base.OnParametersSet();
    }

}