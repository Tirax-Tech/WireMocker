@page "/XPort"
@using Tirax.Application.WireMocker.Services

@inherits ReactiveInjectableComponentBase<XPortViewModel>

@inject ISnackbar Snackbar
@inject IMockServer MockServer

<DualPanel>
    <LeftPanel>
        <MudText Typo="Typo.h5">Mappings</MudText>
        <MudText Typo="Typo.body1">Mapping count = @MockServer.Mappings.Length</MudText>

        <MudText Typo="Typo.h5">Load</MudText>
    </LeftPanel>

    <RightPanel>
        <MudStack>
            <MudTextField T="string" MaxLength="15000"
                          Label="JSON" Variant="Variant.Outlined" Lines="15" @bind-Value="ViewModel!.Mappings" />
            <MudButton Disabled="!canLoad" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Load">Load</MudButton>
        </MudStack>
    </RightPanel>
</DualPanel>

@code {
    bool canLoad;

    public XPort() {
        this.WhenActivated(disposables => {
            this.WhenAnyValue(x => x.ViewModel!.HasMappings)
                .CombineLatest(ViewModel!.LoadMappings.IsExecuting, (hasMappings, isExecuting) => !isExecuting && hasMappings)
                .Subscribe(loadable => canLoad = loadable)
                .DisposeWith(disposables);

            ViewModel!.Notifications.Subscribe(notification => Snackbar.Add(notification.Message, notification.Severity));
        });
    }

    async Task Load() {
        await ViewModel!.LoadMappings.Execute();
    }
}