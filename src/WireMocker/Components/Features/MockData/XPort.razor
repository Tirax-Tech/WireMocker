@using System.Diagnostics
@using global::RZ.Foundation.Types
@using Tirax.Application.WireMocker.Services

@inherits AppReactiveComponent<XPortViewModel>

@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IMockServer MockServer

<MudStack>
    <MudText Typo="Typo.h4">Load</MudText>
    <MudFileUpload T="IBrowserFile" FilesChanged="@LoadFile">
        <ButtonTemplate>
            <MudButton HtmlTag="label" for="@context.Id" Style="width: 100%"
                       StartIcon="@Icons.Material.Filled.Upload" Variant="Variant.Filled" Color="Color.Primary">
                Load
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>

    <MudText Typo="Typo.h4">Save</MudText>
    <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Save">Save</MudButton>

    <MudText Typo="Typo.h4">Mappings</MudText>
    <MudText Typo="Typo.body1">Mapping count = @MockServer.Mappings.Length</MudText>

    <MudText Typo="Typo.h5">Load</MudText>
    <MudStack>
        <MudTextField T="string" MaxLength="15000"
                      Label="JSON" Variant="Variant.Outlined" Lines="15" @bind-Value="ViewModel!.Mappings" />
        <MudButton Disabled="!canLoad" Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="@ViewModel!.LoadMappings.OnExecute()">Load</MudButton>
    </MudStack>
</MudStack>

@code {
    readonly MutableRef<bool> canLoad = new();

    public XPort() {
        this.WhenActivated(disposables => {
            TrackChanges(disposables,
                this.WhenAnyValue(x => x.ViewModel!.HasMappings)
                    .CombineLatest(ViewModel!.LoadMappings.IsExecuting, (hasMappings, isExecuting) => !isExecuting && hasMappings)
                    .Bind(canLoad).Ignore()
                );

            ViewModel!.Notifications.Subscribe(notification => Snackbar.Add(notification.Message, notification.Severity));
        });
    }

    async Task LoadFile(IBrowserFile? file) {
        Debug.Assert(file is not null);
        await using var stream = file.OpenReadStream();
        await ViewModel!.LoadData.Execute(stream);
    }

    async Task Save() {
        var content = await ViewModel!.SaveData.Execute();
        using var streamRef = new DotNetStreamReference(content);
        await JS.InvokeVoidAsync("downloadFileFromStream", "wire-mocker.data", streamRef);
    }
}