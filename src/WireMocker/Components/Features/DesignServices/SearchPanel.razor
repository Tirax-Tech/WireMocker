@using Tirax.Application.WireMocker.Domain
@inherits ReactiveComponentBase<SearchPanelViewModel>

<MudStack>
    <MudTextField T="string" @bind-Text="ViewModel!.ServiceSearchText" Immediate="true"
                  Variant="Variant.Outlined" Placeholder="Type a service name" Label="Search service" />

    @if (ViewModel!.CanNew){
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@NewService">
            New service
        </MudButton>
    }

    <MudExpansionPanels>
        @foreach (var service in ViewModel!.Services){
            <MudExpansionPanel Text="@service.Name">
                <TitleContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@service.Name</MudText>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteService(service))" />
                    </MudStack>
                </TitleContent>
                <ChildContent>
                    <MudStack>
                        @if (service.Proxy is not null){
                            <MudText Typo="Typo.body2">Proxy: @service.Proxy.Url</MudText>
                        }
                    </MudStack>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudStack>

@code {

    async Task NewService() {
        await ViewModel!.NewService.Execute(ViewModel!.ServiceSearchText);
    }

    async Task DeleteService(Service service) {
        await ViewModel!.DeleteService.Execute(service.Id);
    }

}