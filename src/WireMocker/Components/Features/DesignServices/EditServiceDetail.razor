@using Tirax.Application.WireMocker.Domain
@inherits ReactiveComponentBase<EditServiceDetailViewModel>

<MudStack>
    <MudPaper Class="mud-background pa-8">
        <MudStack>
            <MudTextField T="string" Variant="Variant.Filled" Label="(Optional) Endpoint name" @bind-Text="ViewModel!.EndpointName" />
            <MudStack Row="true" AlignItems="AlignItems.Baseline">
                <MudText Typo="Typo.h6">Match type</MudText>
                <MudRadioGroup T="PathMatchType" @bind-Value="ViewModel!.MatchType">
                    <MudRadio Value="@(PathMatchType.Exact)">Exact</MudRadio>
                    <MudRadio Value="@(PathMatchType.Wildcard)">Wildcard</MudRadio>
                </MudRadioGroup>
            </MudStack>
            <MudSwitch T="bool" Label="Ignore Case" LabelPosition="LabelPosition.End" Color="Color.Primary"
                       @bind-Value="ViewModel!.IgnoreCase" />
            <MudTextField T="string" Variant="Variant.Filled" Label="Pattern" Placeholder="e.g. /path/*"
                          Immediate="true" @bind-Text="ViewModel!.Pattern" />
        </MudStack>
    </MudPaper>

    <MudStack Row="true" Justify="Justify.FlexEnd">
        @if (ViewModel!.IsNew){
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                       Disabled="!canSave" OnClick="@Save">Add</MudButton>
        }
        else{
            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save"
                       Disabled="!canSave" OnClick="@Save">Save</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Cancel">Cancel</MudButton>
        }
    </MudStack>
</MudStack>

@code {
    bool canSave;

    public EditServiceDetail() {
        this.WhenActivated(disposables => {
            ViewModel!.Save.CanExecute.Subscribe(v => {
                canSave = v;
                StateHasChanged();
            }).DisposeWith(disposables);
        });
    }

    async Task Save() {
        await ViewModel!.Save.Execute();
    }

}