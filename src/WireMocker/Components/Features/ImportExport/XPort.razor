@page "/XPort"
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using LanguageExt.UnitsOfMeasure
@using Tirax.Application.WireMocker.Services

@inherits ReactiveInjectableComponentBase<XPortViewModel>

@inject ISnackbar Snackbar
@inject IMockServer MockServer

<MudGrid Spacing="0" Class="pa-4">
    <MudItem md="6" Style="height: 90vh">
        <MudText Typo="Typo.h5">Mappings</MudText>
        <MudText Typo="Typo.body1">Mapping count = @MockServer.Mappings.Length</MudText>

        <MudText Typo="Typo.h5">Load</MudText>

    </MudItem>
    <MudItem md="6">
        <MudPaper Class="pa-8 rounded-xl" Style="height: 90vh">
            <MudStack>
                <MudTextField T="string" MaxLength="15000"
                              Label="JSON" Variant="Variant.Outlined" Lines="15" @bind-Value="ViewModel!.Mappings" />
                <MudButton Disabled="!canLoad" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Load">Load</MudButton>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool canLoad;

    public XPort() {
        this.WhenActivated(disposables => {
            this.WhenAnyValue(x => x.ViewModel!.HasMappings)
                .Subscribe(hasMappings => canLoad = hasMappings)
                .DisposeWith(disposables);

            ViewModel!.Notifications.Subscribe(notification => Snackbar.Add(notification.Message, notification.Severity));

            ViewModel!.Changed.Throttle(50.Milliseconds())
                      .Subscribe(_ => InvokeAsync(StateHasChanged))
                      .DisposeWith(disposables);
        });
    }

    async Task Load() {
        await ViewModel!.LoadMappings.Execute();
    }
}